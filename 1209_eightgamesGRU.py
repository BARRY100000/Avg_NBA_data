{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "9f-IQ5ei7VcY"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tensorflow.keras.layers import Dense, Dropout\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xtJExQ4c21nY",
    "outputId": "a3e85f4b-897c-427a-8db7-4646cae2fed0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['gameid', 'playerid', 'plusminusPTS', 'estNETRTG', 'REBpct', 'estOFFRTG', 'DRB', 'FTM', 'uncontestedFGM', 'passes', 'ASTpct', 'touches', 'estUSGpct', 'oppPIP', 'TRB', 'oppFBPTS', 'PTS', 'estpace', 'FGpct', 'pie', 'DIST', 'defendedatrimFGA', 'BLK', '2ndPTS', 'TOVratio', 'pace', 'paceper40', '2ndAST', 'contestedFGA', 'OFFRTG', 'TSpct', 'FGM', '3Ppct', 'FTAST', 'STL', 'defendedatrimFGM', 'SEC', 'defendedatrimFGpct', 'oppPTSoffTOV', 'FBPTS', 'contestedFGM', '3PM', 'name', 'PIP', 'SPD', 'FTpct', 'PTSoffTOV', 'DEFRTG', 'team', 'home', 'win']\n"
     ]
    }
   ],
   "source": [
    "file_path = 'content/selected_columns_s2.txt'\n",
    "\n",
    "with open(file_path, 'r') as file:\n",
    "    selected_columns = [line.strip() for line in file]\n",
    "\n",
    "print(selected_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selected_columns.append(\"gameid\")\n",
    "# selected_columns.append(\"win\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(selected_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "_q9Fyy3b8JWm"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('content/LookingFoward_data_avg_d3_2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "4NNMlmqxD4i1",
    "outputId": "70e48ea9-7538-4a57-8144-356813f125fd"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gameid</th>\n",
       "      <th>playerid</th>\n",
       "      <th>plusminusPTS</th>\n",
       "      <th>estNETRTG</th>\n",
       "      <th>REBpct</th>\n",
       "      <th>estOFFRTG</th>\n",
       "      <th>DRB</th>\n",
       "      <th>FTM</th>\n",
       "      <th>uncontestedFGM</th>\n",
       "      <th>passes</th>\n",
       "      <th>...</th>\n",
       "      <th>3PM</th>\n",
       "      <th>name</th>\n",
       "      <th>PIP</th>\n",
       "      <th>SPD</th>\n",
       "      <th>FTpct</th>\n",
       "      <th>PTSoffTOV</th>\n",
       "      <th>DEFRTG</th>\n",
       "      <th>team</th>\n",
       "      <th>home</th>\n",
       "      <th>win</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1627759</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>242</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1628369</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>245</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22200001</td>\n",
       "      <td>201143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1628401</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>126</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22200001</td>\n",
       "      <td>203935</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>364</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39595</th>\n",
       "      <td>52200211</td>\n",
       "      <td>1630544</td>\n",
       "      <td>5.5</td>\n",
       "      <td>-45.60</td>\n",
       "      <td>0.0605</td>\n",
       "      <td>54.40</td>\n",
       "      <td>5.5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>42.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.5</td>\n",
       "      <td>505</td>\n",
       "      <td>8</td>\n",
       "      <td>4.065</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.85</td>\n",
       "      <td>21</td>\n",
       "      <td>18</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39596</th>\n",
       "      <td>52200211</td>\n",
       "      <td>1630526</td>\n",
       "      <td>5.5</td>\n",
       "      <td>-43.45</td>\n",
       "      <td>0.0480</td>\n",
       "      <td>55.25</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>250</td>\n",
       "      <td>1</td>\n",
       "      <td>4.115</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.15</td>\n",
       "      <td>21</td>\n",
       "      <td>18</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39597</th>\n",
       "      <td>52200211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39598</th>\n",
       "      <td>52200211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39599</th>\n",
       "      <td>52200211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>39600 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         gameid  playerid  plusminusPTS  estNETRTG  REBpct  estOFFRTG  DRB  \\\n",
       "0      22200001   1627759           0.0       0.00  0.0000       0.00  0.0   \n",
       "1      22200001   1628369           0.0       0.00  0.0000       0.00  0.0   \n",
       "2      22200001    201143           0.0       0.00  0.0000       0.00  0.0   \n",
       "3      22200001   1628401           0.0       0.00  0.0000       0.00  0.0   \n",
       "4      22200001    203935           0.0       0.00  0.0000       0.00  0.0   \n",
       "...         ...       ...           ...        ...     ...        ...  ...   \n",
       "39595  52200211   1630544           5.5     -45.60  0.0605      54.40  5.5   \n",
       "39596  52200211   1630526           5.5     -43.45  0.0480      55.25  3.5   \n",
       "39597  52200211         0           0.0       0.00  0.0000       0.00  0.0   \n",
       "39598  52200211         0           0.0       0.00  0.0000       0.00  0.0   \n",
       "39599  52200211         0           0.0       0.00  0.0000       0.00  0.0   \n",
       "\n",
       "       FTM  uncontestedFGM  passes  ...  3PM  name  PIP    SPD  FTpct  \\\n",
       "0      0.0             0.0     0.0  ...  0.0   242    0  0.000    0.0   \n",
       "1      0.0             0.0     0.0  ...  0.0   245    0  0.000    0.0   \n",
       "2      0.0             0.0     0.0  ...  0.0     9    0  0.000    0.0   \n",
       "3      0.0             0.0     0.0  ...  0.0   126    0  0.000    0.0   \n",
       "4      0.0             0.0     0.0  ...  0.0   364    0  0.000    0.0   \n",
       "...    ...             ...     ...  ...  ...   ...  ...    ...    ...   \n",
       "39595  2.5             1.5    42.5  ...  0.5   505    8  4.065    0.5   \n",
       "39596  1.0             1.0    12.5  ...  1.0   250    1  4.115    0.5   \n",
       "39597  0.0             0.0     0.0  ...  0.0     0    0  0.000    0.0   \n",
       "39598  0.0             0.0     0.0  ...  0.0     0    0  0.000    0.0   \n",
       "39599  0.0             0.0     0.0  ...  0.0     0    0  0.000    0.0   \n",
       "\n",
       "       PTSoffTOV  DEFRTG  team  home   win  \n",
       "0            0.0    0.00     3     3  TRUE  \n",
       "1            0.0    0.00     3     3  TRUE  \n",
       "2            0.0    0.00     3     3  TRUE  \n",
       "3            0.0    0.00     3     3  TRUE  \n",
       "4            0.0    0.00     3     3  TRUE  \n",
       "...          ...     ...   ...   ...   ...  \n",
       "39595        0.0   82.85    21    18  TRUE  \n",
       "39596        0.0   82.15    21    18  TRUE  \n",
       "39597        0.0    0.00     0     0     0  \n",
       "39598        0.0    0.00     0     0     0  \n",
       "39599        0.0    0.00     0     0     0  \n",
       "\n",
       "[39600 rows x 51 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[selected_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "nYvZhqJ7mLmO"
   },
   "outputs": [],
   "source": [
    "df[selected_columns].to_csv('content/Looki.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "wnbftuzd8xLG"
   },
   "outputs": [],
   "source": [
    "data = df[selected_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gameid</th>\n",
       "      <th>playerid</th>\n",
       "      <th>plusminusPTS</th>\n",
       "      <th>estNETRTG</th>\n",
       "      <th>REBpct</th>\n",
       "      <th>estOFFRTG</th>\n",
       "      <th>DRB</th>\n",
       "      <th>FTM</th>\n",
       "      <th>uncontestedFGM</th>\n",
       "      <th>passes</th>\n",
       "      <th>...</th>\n",
       "      <th>3PM</th>\n",
       "      <th>name</th>\n",
       "      <th>PIP</th>\n",
       "      <th>SPD</th>\n",
       "      <th>FTpct</th>\n",
       "      <th>PTSoffTOV</th>\n",
       "      <th>DEFRTG</th>\n",
       "      <th>team</th>\n",
       "      <th>home</th>\n",
       "      <th>win</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1627759</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>242</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1628369</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>245</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22200001</td>\n",
       "      <td>201143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1628401</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>126</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22200001</td>\n",
       "      <td>203935</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>364</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39595</th>\n",
       "      <td>52200211</td>\n",
       "      <td>1630544</td>\n",
       "      <td>5.5</td>\n",
       "      <td>-45.60</td>\n",
       "      <td>0.0605</td>\n",
       "      <td>54.40</td>\n",
       "      <td>5.5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>42.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.5</td>\n",
       "      <td>505</td>\n",
       "      <td>8</td>\n",
       "      <td>4.065</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.85</td>\n",
       "      <td>21</td>\n",
       "      <td>18</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39596</th>\n",
       "      <td>52200211</td>\n",
       "      <td>1630526</td>\n",
       "      <td>5.5</td>\n",
       "      <td>-43.45</td>\n",
       "      <td>0.0480</td>\n",
       "      <td>55.25</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>250</td>\n",
       "      <td>1</td>\n",
       "      <td>4.115</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.15</td>\n",
       "      <td>21</td>\n",
       "      <td>18</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39597</th>\n",
       "      <td>52200211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39598</th>\n",
       "      <td>52200211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39599</th>\n",
       "      <td>52200211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>39600 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         gameid  playerid  plusminusPTS  estNETRTG  REBpct  estOFFRTG  DRB  \\\n",
       "0      22200001   1627759           0.0       0.00  0.0000       0.00  0.0   \n",
       "1      22200001   1628369           0.0       0.00  0.0000       0.00  0.0   \n",
       "2      22200001    201143           0.0       0.00  0.0000       0.00  0.0   \n",
       "3      22200001   1628401           0.0       0.00  0.0000       0.00  0.0   \n",
       "4      22200001    203935           0.0       0.00  0.0000       0.00  0.0   \n",
       "...         ...       ...           ...        ...     ...        ...  ...   \n",
       "39595  52200211   1630544           5.5     -45.60  0.0605      54.40  5.5   \n",
       "39596  52200211   1630526           5.5     -43.45  0.0480      55.25  3.5   \n",
       "39597  52200211         0           0.0       0.00  0.0000       0.00  0.0   \n",
       "39598  52200211         0           0.0       0.00  0.0000       0.00  0.0   \n",
       "39599  52200211         0           0.0       0.00  0.0000       0.00  0.0   \n",
       "\n",
       "       FTM  uncontestedFGM  passes  ...  3PM  name  PIP    SPD  FTpct  \\\n",
       "0      0.0             0.0     0.0  ...  0.0   242    0  0.000    0.0   \n",
       "1      0.0             0.0     0.0  ...  0.0   245    0  0.000    0.0   \n",
       "2      0.0             0.0     0.0  ...  0.0     9    0  0.000    0.0   \n",
       "3      0.0             0.0     0.0  ...  0.0   126    0  0.000    0.0   \n",
       "4      0.0             0.0     0.0  ...  0.0   364    0  0.000    0.0   \n",
       "...    ...             ...     ...  ...  ...   ...  ...    ...    ...   \n",
       "39595  2.5             1.5    42.5  ...  0.5   505    8  4.065    0.5   \n",
       "39596  1.0             1.0    12.5  ...  1.0   250    1  4.115    0.5   \n",
       "39597  0.0             0.0     0.0  ...  0.0     0    0  0.000    0.0   \n",
       "39598  0.0             0.0     0.0  ...  0.0     0    0  0.000    0.0   \n",
       "39599  0.0             0.0     0.0  ...  0.0     0    0  0.000    0.0   \n",
       "\n",
       "       PTSoffTOV  DEFRTG  team  home   win  \n",
       "0            0.0    0.00     3     3  TRUE  \n",
       "1            0.0    0.00     3     3  TRUE  \n",
       "2            0.0    0.00     3     3  TRUE  \n",
       "3            0.0    0.00     3     3  TRUE  \n",
       "4            0.0    0.00     3     3  TRUE  \n",
       "...          ...     ...   ...   ...   ...  \n",
       "39595        0.0   82.85    21    18  TRUE  \n",
       "39596        0.0   82.15    21    18  TRUE  \n",
       "39597        0.0    0.00     0     0     0  \n",
       "39598        0.0    0.00     0     0     0  \n",
       "39599        0.0    0.00     0     0     0  \n",
       "\n",
       "[39600 rows x 51 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data.gameid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "RocD_T0KXjwc"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "# 確認每個比賽有 30 行數據\n",
    "num_rows_per_game = 30\n",
    "\n",
    "# 初始化空列表來存放合併後的資料\n",
    "merged_data = []\n",
    "\n",
    "# 用range來遍歷資料集，每次處理30行\n",
    "for i in range(0, len(data), num_rows_per_game):\n",
    "    # 取出當前30行\n",
    "    block = data.iloc[i:i+num_rows_per_game]\n",
    "\n",
    "    # 取出第一行的gameid, home, win\n",
    "    gameid = block['gameid'].iloc[0]\n",
    "    win = block['win'].iloc[0]\n",
    "\n",
    "    # 前15行為team, 後15行為opp_team\n",
    "    team = block['team'].iloc[:15].unique()[0]  # 取出前15行的team (假設都是同一隊)\n",
    "    opp_team = block['team'].iloc[15:].unique()[0]  # 取出後15行的team作為opp_team\n",
    "\n",
    "    # 把gameid放在合併的第一個欄位\n",
    "    row_data = [gameid]\n",
    "\n",
    "    # 將30行展平成一行，跳過 gameid、team、home、win 這些欄位\n",
    "    for _, row in block.iterrows():\n",
    "        row_data.extend(row.drop(['gameid', 'team', 'win']))\n",
    "\n",
    "    # 在最後添加 team, opp_team, home, win\n",
    "    row_data.extend([team, opp_team, win])\n",
    "\n",
    "    # 將展平的一行加入到結果列表\n",
    "    merged_data.append(row_data)\n",
    "\n",
    "# 創建合併後的DataFrame\n",
    "merged_df = pd.DataFrame(merged_data)\n",
    "\n",
    "# 為新DataFrame設置適當的欄位名稱\n",
    "column_names = ['gameid']\n",
    "for player_num in range(1, num_rows_per_game + 1):\n",
    "    for col in data.columns:\n",
    "        if col not in ['gameid', 'team', 'win']:  # 跳過這些欄位的名稱\n",
    "            column_names.append(f'{col}_player_{player_num}')\n",
    "\n",
    "# 添加 team, opp_team, home, win 的欄位名\n",
    "column_names.extend(['team', 'opp_team', 'win'])\n",
    "\n",
    "# 設定新的欄位名稱\n",
    "merged_df.columns = column_names\n",
    "\n",
    "# 保存合併後的資料為CSV\n",
    "merged_df.to_csv('merged_roll_drop_flat.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 444
    },
    "id": "WI6IjnSGYxSE",
    "outputId": "33ce5914-774b-450d-a933-4769dd0ecdc9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gameid</th>\n",
       "      <th>playerid_player_1</th>\n",
       "      <th>plusminusPTS_player_1</th>\n",
       "      <th>estNETRTG_player_1</th>\n",
       "      <th>REBpct_player_1</th>\n",
       "      <th>estOFFRTG_player_1</th>\n",
       "      <th>DRB_player_1</th>\n",
       "      <th>FTM_player_1</th>\n",
       "      <th>uncontestedFGM_player_1</th>\n",
       "      <th>passes_player_1</th>\n",
       "      <th>...</th>\n",
       "      <th>name_player_30</th>\n",
       "      <th>PIP_player_30</th>\n",
       "      <th>SPD_player_30</th>\n",
       "      <th>FTpct_player_30</th>\n",
       "      <th>PTSoffTOV_player_30</th>\n",
       "      <th>DEFRTG_player_30</th>\n",
       "      <th>home_player_30</th>\n",
       "      <th>team</th>\n",
       "      <th>opp_team</th>\n",
       "      <th>win</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22200001</td>\n",
       "      <td>1627759</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>23</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22200002</td>\n",
       "      <td>203952</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>14</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22200003</td>\n",
       "      <td>1630180</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22200004</td>\n",
       "      <td>1627741</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>194</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>30</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22200005</td>\n",
       "      <td>1629631</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td>52200111</td>\n",
       "      <td>1628384</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.55</td>\n",
       "      <td>0.0385</td>\n",
       "      <td>98.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>5</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1316</th>\n",
       "      <td>52200121</td>\n",
       "      <td>1629020</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>-26.25</td>\n",
       "      <td>0.0500</td>\n",
       "      <td>95.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>18</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>52200131</td>\n",
       "      <td>1630530</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.15</td>\n",
       "      <td>0.0430</td>\n",
       "      <td>113.10</td>\n",
       "      <td>2.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>5.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1318</th>\n",
       "      <td>52200201</td>\n",
       "      <td>202710</td>\n",
       "      <td>-6.5</td>\n",
       "      <td>-12.35</td>\n",
       "      <td>0.0375</td>\n",
       "      <td>95.20</td>\n",
       "      <td>2.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>42.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1319</th>\n",
       "      <td>52200211</td>\n",
       "      <td>1629638</td>\n",
       "      <td>4.5</td>\n",
       "      <td>8.35</td>\n",
       "      <td>0.0560</td>\n",
       "      <td>115.05</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1320 rows × 1444 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        gameid  playerid_player_1  plusminusPTS_player_1  estNETRTG_player_1  \\\n",
       "0     22200001            1627759                    0.0                0.00   \n",
       "1     22200002             203952                    0.0                0.00   \n",
       "2     22200003            1630180                    0.0                0.00   \n",
       "3     22200004            1627741                    0.0                0.00   \n",
       "4     22200005            1629631                    0.0                0.00   \n",
       "...        ...                ...                    ...                 ...   \n",
       "1315  52200111            1628384                   -9.0              -11.55   \n",
       "1316  52200121            1629020                  -10.0              -26.25   \n",
       "1317  52200131            1630530                    8.0               10.15   \n",
       "1318  52200201             202710                   -6.5              -12.35   \n",
       "1319  52200211            1629638                    4.5                8.35   \n",
       "\n",
       "      REBpct_player_1  estOFFRTG_player_1  DRB_player_1  FTM_player_1  \\\n",
       "0              0.0000                0.00           0.0           0.0   \n",
       "1              0.0000                0.00           0.0           0.0   \n",
       "2              0.0000                0.00           0.0           0.0   \n",
       "3              0.0000                0.00           0.0           0.0   \n",
       "4              0.0000                0.00           0.0           0.0   \n",
       "...               ...                 ...           ...           ...   \n",
       "1315           0.0385               98.45           1.5           0.0   \n",
       "1316           0.0500               95.45           1.5           1.0   \n",
       "1317           0.0430              113.10           2.5           7.5   \n",
       "1318           0.0375               95.20           2.5           9.0   \n",
       "1319           0.0560              115.05           2.5           1.5   \n",
       "\n",
       "      uncontestedFGM_player_1  passes_player_1  ...  name_player_30  \\\n",
       "0                         0.0              0.0  ...               0   \n",
       "1                         0.0              0.0  ...               0   \n",
       "2                         0.0              0.0  ...               0   \n",
       "3                         0.0              0.0  ...             194   \n",
       "4                         0.0              0.0  ...               0   \n",
       "...                       ...              ...  ...             ...   \n",
       "1315                      2.5             25.5  ...               0   \n",
       "1316                      0.5              8.0  ...               0   \n",
       "1317                      5.5             22.5  ...               0   \n",
       "1318                      2.5             42.5  ...               0   \n",
       "1319                      3.0             29.0  ...               0   \n",
       "\n",
       "      PIP_player_30  SPD_player_30  FTpct_player_30  PTSoffTOV_player_30  \\\n",
       "0                 0            0.0              0.0                  0.0   \n",
       "1                 0            0.0              0.0                  0.0   \n",
       "2                 0            0.0              0.0                  0.0   \n",
       "3                 0            0.0              0.0                  0.0   \n",
       "4                 0            0.0              0.0                  0.0   \n",
       "...             ...            ...              ...                  ...   \n",
       "1315              0            0.0              0.0                  0.0   \n",
       "1316              0            0.0              0.0                  0.0   \n",
       "1317              0            0.0              0.0                  0.0   \n",
       "1318              0            0.0              0.0                  0.0   \n",
       "1319              0            0.0              0.0                  0.0   \n",
       "\n",
       "      DEFRTG_player_30  home_player_30  team  opp_team    win  \n",
       "0                  0.0               0     3        23   TRUE  \n",
       "1                  0.0               0    10        14   TRUE  \n",
       "2                  0.0               0     9        22   TRUE  \n",
       "3                  0.0              12    12        30  FALSE  \n",
       "4                  0.0               0     1        11   TRUE  \n",
       "...                ...             ...   ...       ...    ...  \n",
       "1315               0.0               0    28         5  FALSE  \n",
       "1316               0.0               0    14        18   TRUE  \n",
       "1317               0.0               0    19        21  FALSE  \n",
       "1318               0.0               0    16         5   TRUE  \n",
       "1319               0.0               0    18        21   TRUE  \n",
       "\n",
       "[1320 rows x 1444 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "y-cQTdspPspW"
   },
   "outputs": [],
   "source": [
    "shape = 1444"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "20wcJ7wJHGvq"
   },
   "outputs": [],
   "source": [
    "merged_df = merged_df.drop(index=merged_df.index[:80])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 444
    },
    "id": "iKZbmNw1eIDy",
    "outputId": "7de38ea0-7793-4cda-92aa-f5d743b97f03"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gameid</th>\n",
       "      <th>playerid_player_1</th>\n",
       "      <th>plusminusPTS_player_1</th>\n",
       "      <th>estNETRTG_player_1</th>\n",
       "      <th>REBpct_player_1</th>\n",
       "      <th>estOFFRTG_player_1</th>\n",
       "      <th>DRB_player_1</th>\n",
       "      <th>FTM_player_1</th>\n",
       "      <th>uncontestedFGM_player_1</th>\n",
       "      <th>passes_player_1</th>\n",
       "      <th>...</th>\n",
       "      <th>name_player_30</th>\n",
       "      <th>PIP_player_30</th>\n",
       "      <th>SPD_player_30</th>\n",
       "      <th>FTpct_player_30</th>\n",
       "      <th>PTSoffTOV_player_30</th>\n",
       "      <th>DEFRTG_player_30</th>\n",
       "      <th>home_player_30</th>\n",
       "      <th>team</th>\n",
       "      <th>opp_team</th>\n",
       "      <th>win</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>22200081</td>\n",
       "      <td>203084</td>\n",
       "      <td>-15.0</td>\n",
       "      <td>-21.40</td>\n",
       "      <td>0.0475</td>\n",
       "      <td>110.15</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>30.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>16</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>22200082</td>\n",
       "      <td>202330</td>\n",
       "      <td>-15.5</td>\n",
       "      <td>-26.55</td>\n",
       "      <td>0.1095</td>\n",
       "      <td>85.45</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>22200083</td>\n",
       "      <td>201142</td>\n",
       "      <td>-11.5</td>\n",
       "      <td>-11.85</td>\n",
       "      <td>0.0530</td>\n",
       "      <td>102.20</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>22200084</td>\n",
       "      <td>201942</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.00</td>\n",
       "      <td>0.0150</td>\n",
       "      <td>109.35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>22200085</td>\n",
       "      <td>1628960</td>\n",
       "      <td>20.0</td>\n",
       "      <td>32.25</td>\n",
       "      <td>0.0655</td>\n",
       "      <td>110.25</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td>52200111</td>\n",
       "      <td>1628384</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.55</td>\n",
       "      <td>0.0385</td>\n",
       "      <td>98.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>5</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1316</th>\n",
       "      <td>52200121</td>\n",
       "      <td>1629020</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>-26.25</td>\n",
       "      <td>0.0500</td>\n",
       "      <td>95.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>18</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>52200131</td>\n",
       "      <td>1630530</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.15</td>\n",
       "      <td>0.0430</td>\n",
       "      <td>113.10</td>\n",
       "      <td>2.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>5.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>FALSE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1318</th>\n",
       "      <td>52200201</td>\n",
       "      <td>202710</td>\n",
       "      <td>-6.5</td>\n",
       "      <td>-12.35</td>\n",
       "      <td>0.0375</td>\n",
       "      <td>95.20</td>\n",
       "      <td>2.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>42.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1319</th>\n",
       "      <td>52200211</td>\n",
       "      <td>1629638</td>\n",
       "      <td>4.5</td>\n",
       "      <td>8.35</td>\n",
       "      <td>0.0560</td>\n",
       "      <td>115.05</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "      <td>TRUE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1240 rows × 1444 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        gameid  playerid_player_1  plusminusPTS_player_1  estNETRTG_player_1  \\\n",
       "80    22200081             203084                  -15.0              -21.40   \n",
       "81    22200082             202330                  -15.5              -26.55   \n",
       "82    22200083             201142                  -11.5              -11.85   \n",
       "83    22200084             201942                   -9.0              -11.00   \n",
       "84    22200085            1628960                   20.0               32.25   \n",
       "...        ...                ...                    ...                 ...   \n",
       "1315  52200111            1628384                   -9.0              -11.55   \n",
       "1316  52200121            1629020                  -10.0              -26.25   \n",
       "1317  52200131            1630530                    8.0               10.15   \n",
       "1318  52200201             202710                   -6.5              -12.35   \n",
       "1319  52200211            1629638                    4.5                8.35   \n",
       "\n",
       "      REBpct_player_1  estOFFRTG_player_1  DRB_player_1  FTM_player_1  \\\n",
       "80             0.0475              110.15           2.5           4.5   \n",
       "81             0.1095               85.45           6.5           3.5   \n",
       "82             0.0530              102.20           4.0          11.5   \n",
       "83             0.0150              109.35           1.0           8.0   \n",
       "84             0.0655              110.25           4.0           1.5   \n",
       "...               ...                 ...           ...           ...   \n",
       "1315           0.0385               98.45           1.5           0.0   \n",
       "1316           0.0500               95.45           1.5           1.0   \n",
       "1317           0.0430              113.10           2.5           7.5   \n",
       "1318           0.0375               95.20           2.5           9.0   \n",
       "1319           0.0560              115.05           2.5           1.5   \n",
       "\n",
       "      uncontestedFGM_player_1  passes_player_1  ...  name_player_30  \\\n",
       "80                        2.0             30.5  ...               0   \n",
       "81                        4.0             53.0  ...               0   \n",
       "82                        3.0             33.0  ...               0   \n",
       "83                        4.0             36.0  ...               0   \n",
       "84                        3.0             30.0  ...               0   \n",
       "...                       ...              ...  ...             ...   \n",
       "1315                      2.5             25.5  ...               0   \n",
       "1316                      0.5              8.0  ...               0   \n",
       "1317                      5.5             22.5  ...               0   \n",
       "1318                      2.5             42.5  ...               0   \n",
       "1319                      3.0             29.0  ...               0   \n",
       "\n",
       "      PIP_player_30  SPD_player_30  FTpct_player_30  PTSoffTOV_player_30  \\\n",
       "80                0            0.0              0.0                  0.0   \n",
       "81                0            0.0              0.0                  0.0   \n",
       "82                0            0.0              0.0                  0.0   \n",
       "83                0            0.0              0.0                  0.0   \n",
       "84                0            0.0              0.0                  0.0   \n",
       "...             ...            ...              ...                  ...   \n",
       "1315              0            0.0              0.0                  0.0   \n",
       "1316              0            0.0              0.0                  0.0   \n",
       "1317              0            0.0              0.0                  0.0   \n",
       "1318              0            0.0              0.0                  0.0   \n",
       "1319              0            0.0              0.0                  0.0   \n",
       "\n",
       "      DEFRTG_player_30  home_player_30  team  opp_team    win  \n",
       "80                 0.0               0    26        16   TRUE  \n",
       "81                 0.0               0     4        10   TRUE  \n",
       "82                 0.0               0     2        12  FALSE  \n",
       "83                 0.0               0     5        23  FALSE  \n",
       "84                 0.0               0    17         1   TRUE  \n",
       "...                ...             ...   ...       ...    ...  \n",
       "1315               0.0               0    28         5  FALSE  \n",
       "1316               0.0               0    14        18   TRUE  \n",
       "1317               0.0               0    19        21  FALSE  \n",
       "1318               0.0               0    16         5   TRUE  \n",
       "1319               0.0               0    18        21   TRUE  \n",
       "\n",
       "[1240 rows x 1444 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "f63LypB75Bj7"
   },
   "outputs": [],
   "source": [
    "# 將每場比賽中的所有球員數據合併成一個特徵向量\n",
    "X = []\n",
    "y = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "tQok_eN98u1w"
   },
   "outputs": [],
   "source": [
    "y = np.array(merged_df['win'])\n",
    "\n",
    "# 勝負\n",
    "y = np.where(y == 'TRUE', 1, 0)\n",
    "y = to_categorical(y, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "8_22ahhF5Ney",
    "outputId": "a8c85d82-7f93-49a4-e038-09c6e342e50c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1433</th>\n",
       "      <th>1434</th>\n",
       "      <th>1435</th>\n",
       "      <th>1436</th>\n",
       "      <th>1437</th>\n",
       "      <th>1438</th>\n",
       "      <th>1439</th>\n",
       "      <th>1440</th>\n",
       "      <th>1441</th>\n",
       "      <th>1442</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22200081.0</td>\n",
       "      <td>203084.0</td>\n",
       "      <td>-15.0</td>\n",
       "      <td>-21.40</td>\n",
       "      <td>0.0475</td>\n",
       "      <td>110.15</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>30.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22200082.0</td>\n",
       "      <td>202330.0</td>\n",
       "      <td>-15.5</td>\n",
       "      <td>-26.55</td>\n",
       "      <td>0.1095</td>\n",
       "      <td>85.45</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22200083.0</td>\n",
       "      <td>201142.0</td>\n",
       "      <td>-11.5</td>\n",
       "      <td>-11.85</td>\n",
       "      <td>0.0530</td>\n",
       "      <td>102.20</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22200084.0</td>\n",
       "      <td>201942.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.00</td>\n",
       "      <td>0.0150</td>\n",
       "      <td>109.35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22200085.0</td>\n",
       "      <td>1628960.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>32.25</td>\n",
       "      <td>0.0655</td>\n",
       "      <td>110.25</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>52200111.0</td>\n",
       "      <td>1628384.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.55</td>\n",
       "      <td>0.0385</td>\n",
       "      <td>98.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>52200121.0</td>\n",
       "      <td>1629020.0</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>-26.25</td>\n",
       "      <td>0.0500</td>\n",
       "      <td>95.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>52200131.0</td>\n",
       "      <td>1630530.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.15</td>\n",
       "      <td>0.0430</td>\n",
       "      <td>113.10</td>\n",
       "      <td>2.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>5.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238</th>\n",
       "      <td>52200201.0</td>\n",
       "      <td>202710.0</td>\n",
       "      <td>-6.5</td>\n",
       "      <td>-12.35</td>\n",
       "      <td>0.0375</td>\n",
       "      <td>95.20</td>\n",
       "      <td>2.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>42.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239</th>\n",
       "      <td>52200211.0</td>\n",
       "      <td>1629638.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>8.35</td>\n",
       "      <td>0.0560</td>\n",
       "      <td>115.05</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1240 rows × 1443 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0          1     2      3       4       5     6     7     8     \\\n",
       "0     22200081.0   203084.0 -15.0 -21.40  0.0475  110.15   2.5   4.5   2.0   \n",
       "1     22200082.0   202330.0 -15.5 -26.55  0.1095   85.45   6.5   3.5   4.0   \n",
       "2     22200083.0   201142.0 -11.5 -11.85  0.0530  102.20   4.0  11.5   3.0   \n",
       "3     22200084.0   201942.0  -9.0 -11.00  0.0150  109.35   1.0   8.0   4.0   \n",
       "4     22200085.0  1628960.0  20.0  32.25  0.0655  110.25   4.0   1.5   3.0   \n",
       "...          ...        ...   ...    ...     ...     ...   ...   ...   ...   \n",
       "1235  52200111.0  1628384.0  -9.0 -11.55  0.0385   98.45   1.5   0.0   2.5   \n",
       "1236  52200121.0  1629020.0 -10.0 -26.25  0.0500   95.45   1.5   1.0   0.5   \n",
       "1237  52200131.0  1630530.0   8.0  10.15  0.0430  113.10   2.5   7.5   5.5   \n",
       "1238  52200201.0   202710.0  -6.5 -12.35  0.0375   95.20   2.5   9.0   2.5   \n",
       "1239  52200211.0  1629638.0   4.5   8.35  0.0560  115.05   2.5   1.5   3.0   \n",
       "\n",
       "      9     ...  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  \n",
       "0     30.5  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  26.0  16.0  \n",
       "1     53.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   4.0  10.0  \n",
       "2     33.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   2.0  12.0  \n",
       "3     36.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   5.0  23.0  \n",
       "4     30.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  17.0   1.0  \n",
       "...    ...  ...   ...   ...   ...   ...   ...   ...   ...   ...   ...   ...  \n",
       "1235  25.5  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  28.0   5.0  \n",
       "1236   8.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  14.0  18.0  \n",
       "1237  22.5  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  19.0  21.0  \n",
       "1238  42.5  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  16.0   5.0  \n",
       "1239  29.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  18.0  21.0  \n",
       "\n",
       "[1240 rows x 1443 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.array(merged_df.drop(columns=['win']))\n",
    "X = pd.DataFrame(X)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "3M_9U6Gk8v-X"
   },
   "outputs": [],
   "source": [
    "Y = pd.DataFrame(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "P5nzh3Gp8w2S",
    "outputId": "ddb6f77f-e442-4958-b4a5-19ca9da854d8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1240 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        0    1\n",
       "0     0.0  1.0\n",
       "1     0.0  1.0\n",
       "2     1.0  0.0\n",
       "3     1.0  0.0\n",
       "4     0.0  1.0\n",
       "...   ...  ...\n",
       "1235  1.0  0.0\n",
       "1236  0.0  1.0\n",
       "1237  1.0  0.0\n",
       "1238  0.0  1.0\n",
       "1239  0.0  1.0\n",
       "\n",
       "[1240 rows x 2 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "Mb8_3-vB2T-d"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, shuffle = False)\n",
    "X_train_df = pd.DataFrame(X_train)\n",
    "# X_train_df.to_csv('content/X_trainA.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "toa7gd4d2T-d",
    "outputId": "0b363948-bbc9-476c-afb4-9284c1bcbc89"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1433</th>\n",
       "      <th>1434</th>\n",
       "      <th>1435</th>\n",
       "      <th>1436</th>\n",
       "      <th>1437</th>\n",
       "      <th>1438</th>\n",
       "      <th>1439</th>\n",
       "      <th>1440</th>\n",
       "      <th>1441</th>\n",
       "      <th>1442</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22200081.0</td>\n",
       "      <td>203084.0</td>\n",
       "      <td>-15.0</td>\n",
       "      <td>-21.40</td>\n",
       "      <td>0.0475</td>\n",
       "      <td>110.15</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>30.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22200082.0</td>\n",
       "      <td>202330.0</td>\n",
       "      <td>-15.5</td>\n",
       "      <td>-26.55</td>\n",
       "      <td>0.1095</td>\n",
       "      <td>85.45</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22200083.0</td>\n",
       "      <td>201142.0</td>\n",
       "      <td>-11.5</td>\n",
       "      <td>-11.85</td>\n",
       "      <td>0.0530</td>\n",
       "      <td>102.20</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22200084.0</td>\n",
       "      <td>201942.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.00</td>\n",
       "      <td>0.0150</td>\n",
       "      <td>109.35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22200085.0</td>\n",
       "      <td>1628960.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>32.25</td>\n",
       "      <td>0.0655</td>\n",
       "      <td>110.25</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>22200944.0</td>\n",
       "      <td>1628966.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-1.50</td>\n",
       "      <td>0.0685</td>\n",
       "      <td>95.45</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>22200945.0</td>\n",
       "      <td>1628978.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.95</td>\n",
       "      <td>0.0730</td>\n",
       "      <td>111.90</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>22200946.0</td>\n",
       "      <td>202330.0</td>\n",
       "      <td>-1.5</td>\n",
       "      <td>-3.50</td>\n",
       "      <td>0.0515</td>\n",
       "      <td>102.70</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>22200947.0</td>\n",
       "      <td>1629631.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-14.85</td>\n",
       "      <td>0.0600</td>\n",
       "      <td>119.70</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>22200948.0</td>\n",
       "      <td>1628369.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.1270</td>\n",
       "      <td>115.45</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>52.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>868 rows × 1443 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0          1     2      3       4       5     6     7     8     \\\n",
       "0    22200081.0   203084.0 -15.0 -21.40  0.0475  110.15   2.5   4.5   2.0   \n",
       "1    22200082.0   202330.0 -15.5 -26.55  0.1095   85.45   6.5   3.5   4.0   \n",
       "2    22200083.0   201142.0 -11.5 -11.85  0.0530  102.20   4.0  11.5   3.0   \n",
       "3    22200084.0   201942.0  -9.0 -11.00  0.0150  109.35   1.0   8.0   4.0   \n",
       "4    22200085.0  1628960.0  20.0  32.25  0.0655  110.25   4.0   1.5   3.0   \n",
       "..          ...        ...   ...    ...     ...     ...   ...   ...   ...   \n",
       "863  22200944.0  1628966.0  -3.0  -1.50  0.0685   95.45   4.5   4.5   0.5   \n",
       "864  22200945.0  1628978.0  12.0  12.95  0.0730  111.90   3.5   1.5   5.0   \n",
       "865  22200946.0   202330.0  -1.5  -3.50  0.0515  102.70   3.5   2.5   5.0   \n",
       "866  22200947.0  1629631.0  -9.0 -14.85  0.0600  119.70   2.5   1.5   2.5   \n",
       "867  22200948.0  1628369.0  -7.0   1.50  0.1270  115.45   7.0   6.0   4.5   \n",
       "\n",
       "     9     ...  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  \n",
       "0    30.5  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  26.0  16.0  \n",
       "1    53.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   4.0  10.0  \n",
       "2    33.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   2.0  12.0  \n",
       "3    36.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   5.0  23.0  \n",
       "4    30.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  17.0   1.0  \n",
       "..    ...  ...   ...   ...   ...   ...   ...   ...   ...   ...   ...   ...  \n",
       "863  23.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  27.0  12.0  \n",
       "864  49.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0  10.0  13.0  \n",
       "865  36.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   4.0  22.0  \n",
       "866  23.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   1.0  25.0  \n",
       "867  52.0  ...   0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0   3.0   2.0  \n",
       "\n",
       "[868 rows x 1443 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "i2bcyZ-A2T-e",
    "outputId": "59650d55-9360-48bc-a5af-9738a138075e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1433</th>\n",
       "      <th>1434</th>\n",
       "      <th>1435</th>\n",
       "      <th>1436</th>\n",
       "      <th>1437</th>\n",
       "      <th>1438</th>\n",
       "      <th>1439</th>\n",
       "      <th>1440</th>\n",
       "      <th>1441</th>\n",
       "      <th>1442</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>22200949.0</td>\n",
       "      <td>202710.0</td>\n",
       "      <td>-5.5</td>\n",
       "      <td>-7.90</td>\n",
       "      <td>0.1195</td>\n",
       "      <td>106.40</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>40.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>22200950.0</td>\n",
       "      <td>201942.0</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>-6.30</td>\n",
       "      <td>0.0500</td>\n",
       "      <td>105.15</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>22200951.0</td>\n",
       "      <td>1629652.0</td>\n",
       "      <td>-23.0</td>\n",
       "      <td>-35.35</td>\n",
       "      <td>0.0465</td>\n",
       "      <td>105.35</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>19.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>22200952.0</td>\n",
       "      <td>1629008.0</td>\n",
       "      <td>19.5</td>\n",
       "      <td>35.10</td>\n",
       "      <td>0.1270</td>\n",
       "      <td>140.05</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.165</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>22200953.0</td>\n",
       "      <td>1628978.0</td>\n",
       "      <td>18.5</td>\n",
       "      <td>26.00</td>\n",
       "      <td>0.1020</td>\n",
       "      <td>117.25</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>43.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>52200111.0</td>\n",
       "      <td>1628384.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-11.55</td>\n",
       "      <td>0.0385</td>\n",
       "      <td>98.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>52200121.0</td>\n",
       "      <td>1629020.0</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>-26.25</td>\n",
       "      <td>0.0500</td>\n",
       "      <td>95.45</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>52200131.0</td>\n",
       "      <td>1630530.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.15</td>\n",
       "      <td>0.0430</td>\n",
       "      <td>113.10</td>\n",
       "      <td>2.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>5.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238</th>\n",
       "      <td>52200201.0</td>\n",
       "      <td>202710.0</td>\n",
       "      <td>-6.5</td>\n",
       "      <td>-12.35</td>\n",
       "      <td>0.0375</td>\n",
       "      <td>95.20</td>\n",
       "      <td>2.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>42.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239</th>\n",
       "      <td>52200211.0</td>\n",
       "      <td>1629638.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>8.35</td>\n",
       "      <td>0.0560</td>\n",
       "      <td>115.05</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>372 rows × 1443 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0          1     2      3       4       5     6     7     8     \\\n",
       "868   22200949.0   202710.0  -5.5  -7.90  0.1195  106.40   4.0   4.0   4.5   \n",
       "869   22200950.0   201942.0  -2.5  -6.30  0.0500  105.15   2.0   5.0   2.0   \n",
       "870   22200951.0  1629652.0 -23.0 -35.35  0.0465  105.35   0.5   2.5   4.0   \n",
       "871   22200952.0  1629008.0  19.5  35.10  0.1270  140.05   7.0   0.5   5.0   \n",
       "872   22200953.0  1628978.0  18.5  26.00  0.1020  117.25   3.5   0.0   3.5   \n",
       "...          ...        ...   ...    ...     ...     ...   ...   ...   ...   \n",
       "1235  52200111.0  1628384.0  -9.0 -11.55  0.0385   98.45   1.5   0.0   2.5   \n",
       "1236  52200121.0  1629020.0 -10.0 -26.25  0.0500   95.45   1.5   1.0   0.5   \n",
       "1237  52200131.0  1630530.0   8.0  10.15  0.0430  113.10   2.5   7.5   5.5   \n",
       "1238  52200201.0   202710.0  -6.5 -12.35  0.0375   95.20   2.5   9.0   2.5   \n",
       "1239  52200211.0  1629638.0   4.5   8.35  0.0560  115.05   2.5   1.5   3.0   \n",
       "\n",
       "      9     ...  1433   1434  1435   1436  1437  1438  1439  1440  1441  1442  \n",
       "868   40.0  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  16.0  20.0  \n",
       "869   36.0  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0   5.0  24.0  \n",
       "870   19.5  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  21.0  29.0  \n",
       "871   22.0  ...   0.0  104.0   0.0  3.165   0.0   0.0  87.5   8.0   8.0  15.0  \n",
       "872   43.0  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  10.0  19.0  \n",
       "...    ...  ...   ...    ...   ...    ...   ...   ...   ...   ...   ...   ...  \n",
       "1235  25.5  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  28.0   5.0  \n",
       "1236   8.0  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  14.0  18.0  \n",
       "1237  22.5  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  19.0  21.0  \n",
       "1238  42.5  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  16.0   5.0  \n",
       "1239  29.0  ...   0.0    0.0   0.0  0.000   0.0   0.0   0.0   0.0  18.0  21.0  \n",
       "\n",
       "[372 rows x 1443 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "Y0_NqnFF2T-e",
    "outputId": "6cef4b2b-1981-4f9c-870e-1abf7f504c65"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>868 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0    1\n",
       "0    0.0  1.0\n",
       "1    0.0  1.0\n",
       "2    1.0  0.0\n",
       "3    1.0  0.0\n",
       "4    0.0  1.0\n",
       "..   ...  ...\n",
       "863  0.0  1.0\n",
       "864  0.0  1.0\n",
       "865  1.0  0.0\n",
       "866  0.0  1.0\n",
       "867  1.0  0.0\n",
       "\n",
       "[868 rows x 2 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "JIdhmqY42T-e",
    "outputId": "abe068a9-5440-4903-c06e-1e5f5020cb95"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>372 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        0    1\n",
       "868   1.0  0.0\n",
       "869   1.0  0.0\n",
       "870   0.0  1.0\n",
       "871   0.0  1.0\n",
       "872   0.0  1.0\n",
       "...   ...  ...\n",
       "1235  1.0  0.0\n",
       "1236  0.0  1.0\n",
       "1237  1.0  0.0\n",
       "1238  0.0  1.0\n",
       "1239  0.0  1.0\n",
       "\n",
       "[372 rows x 2 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "G26M1BSV8ydn"
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "# 標準化\n",
    "scaler = MinMaxScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "v3Kcn_n8I7Nj",
    "outputId": "307dfa35-992e-474a-ee8d-d4fffa47f3e0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.00115340e+00 1.09644676e-03 4.12280702e-01 ... 0.00000000e+00\n",
      "  5.17241379e-01 6.55172414e-01]\n",
      " [1.00230681e+00 5.59411611e-04 4.64912281e-01 ... 0.00000000e+00\n",
      "  1.37931034e-01 7.93103448e-01]\n",
      " [1.00346021e+00 9.98906350e-01 1.05263158e-01 ... 0.00000000e+00\n",
      "  6.89655172e-01 9.65517241e-01]\n",
      " ...\n",
      " [3.46021338e+04 9.99520305e-01 6.49122807e-01 ... 0.00000000e+00\n",
      "  6.20689655e-01 6.89655172e-01]\n",
      " [3.46022145e+04 1.09644676e-03 3.94736842e-01 ... 0.00000000e+00\n",
      "  5.17241379e-01 1.37931034e-01]\n",
      " [3.46022261e+04 9.98896561e-01 5.87719298e-01 ... 0.00000000e+00\n",
      "  5.86206897e-01 6.89655172e-01]]\n"
     ]
    }
   ],
   "source": [
    "print(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(372, 1443)\n"
     ]
    }
   ],
   "source": [
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IcMfxJjz2T-e",
    "outputId": "55366eaf-72f8-4beb-8aaa-1151e5a60b39"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       0    1\n",
      "0    0.0  1.0\n",
      "1    0.0  1.0\n",
      "2    1.0  0.0\n",
      "3    1.0  0.0\n",
      "4    0.0  1.0\n",
      "..   ...  ...\n",
      "863  0.0  1.0\n",
      "864  0.0  1.0\n",
      "865  1.0  0.0\n",
      "866  0.0  1.0\n",
      "867  1.0  0.0\n",
      "\n",
      "[868 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "print(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "FcLXhMPeJvWw"
   },
   "outputs": [],
   "source": [
    "X_shape = shape-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "s767iOqG81ib",
    "outputId": "2d9e59e6-dfa2-4472-b1ac-bdf5495fe8b4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "28/28 [==============================] - 13s 26ms/step - loss: 0.8328 - accuracy: 0.4343\n",
      "Epoch 2/30\n",
      "28/28 [==============================] - 1s 26ms/step - loss: 0.6878 - accuracy: 0.5760\n",
      "Epoch 3/30\n",
      "28/28 [==============================] - 1s 26ms/step - loss: 0.7000 - accuracy: 0.5588\n",
      "Epoch 4/30\n",
      "28/28 [==============================] - 0s 17ms/step - loss: 0.6822 - accuracy: 0.5645\n",
      "Epoch 5/30\n",
      "28/28 [==============================] - 0s 10ms/step - loss: 0.6938 - accuracy: 0.5645\n",
      "Epoch 6/30\n",
      "28/28 [==============================] - 0s 15ms/step - loss: 0.6838 - accuracy: 0.5783\n",
      "Epoch 7/30\n",
      "28/28 [==============================] - 1s 24ms/step - loss: 0.6865 - accuracy: 0.5611\n",
      "Epoch 8/30\n",
      "28/28 [==============================] - 1s 31ms/step - loss: 0.6924 - accuracy: 0.5668\n",
      "Epoch 9/30\n",
      "28/28 [==============================] - 1s 20ms/step - loss: 0.6817 - accuracy: 0.5829\n",
      "Epoch 10/30\n",
      "28/28 [==============================] - 1s 21ms/step - loss: 0.6881 - accuracy: 0.5714\n",
      "Epoch 11/30\n",
      "28/28 [==============================] - 1s 19ms/step - loss: 0.6789 - accuracy: 0.5945\n",
      "Epoch 12/30\n",
      "28/28 [==============================] - 1s 24ms/step - loss: 0.6797 - accuracy: 0.5726\n",
      "Epoch 13/30\n",
      "28/28 [==============================] - 1s 20ms/step - loss: 0.6807 - accuracy: 0.5945\n",
      "Epoch 14/30\n",
      "28/28 [==============================] - 1s 29ms/step - loss: 0.6876 - accuracy: 0.5841\n",
      "Epoch 15/30\n",
      "28/28 [==============================] - 1s 29ms/step - loss: 0.6813 - accuracy: 0.5772\n",
      "Epoch 16/30\n",
      "28/28 [==============================] - 0s 13ms/step - loss: 0.6684 - accuracy: 0.5991\n",
      "Epoch 17/30\n",
      "28/28 [==============================] - 0s 12ms/step - loss: 0.6672 - accuracy: 0.6048\n",
      "Epoch 18/30\n",
      "28/28 [==============================] - 1s 18ms/step - loss: 0.6489 - accuracy: 0.6394\n",
      "Epoch 19/30\n",
      "28/28 [==============================] - 1s 26ms/step - loss: 0.6182 - accuracy: 0.6809\n",
      "Epoch 20/30\n",
      "28/28 [==============================] - 0s 10ms/step - loss: 0.5855 - accuracy: 0.7074\n",
      "Epoch 21/30\n",
      "28/28 [==============================] - 0s 13ms/step - loss: 0.5791 - accuracy: 0.7074\n",
      "Epoch 22/30\n",
      "28/28 [==============================] - 0s 18ms/step - loss: 0.5719 - accuracy: 0.7166\n",
      "Epoch 23/30\n",
      "28/28 [==============================] - 1s 24ms/step - loss: 0.5683 - accuracy: 0.7316\n",
      "Epoch 24/30\n",
      "28/28 [==============================] - 0s 16ms/step - loss: 0.5408 - accuracy: 0.7604\n",
      "Epoch 25/30\n",
      "28/28 [==============================] - 0s 16ms/step - loss: 0.5114 - accuracy: 0.7696\n",
      "Epoch 26/30\n",
      "28/28 [==============================] - 0s 17ms/step - loss: 0.5060 - accuracy: 0.7800\n",
      "Epoch 27/30\n",
      "28/28 [==============================] - 0s 18ms/step - loss: 0.4983 - accuracy: 0.7615\n",
      "Epoch 28/30\n",
      "28/28 [==============================] - 1s 24ms/step - loss: 0.5172 - accuracy: 0.7558\n",
      "Epoch 29/30\n",
      "28/28 [==============================] - 1s 26ms/step - loss: 0.4838 - accuracy: 0.7765\n",
      "Epoch 30/30\n",
      "28/28 [==============================] - 1s 19ms/step - loss: 0.4673 - accuracy: 0.8168\n",
      "模型准确性: 0.527\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "from keras.layers import GRU, Conv1D, Attention\n",
    "dropout_rate = 0.2\n",
    "\n",
    "# Reshape the input data correctly\n",
    "X_train = X_train.reshape(X_train.shape[0], 1, X_shape)  # (samples, time steps, features)\n",
    "X_test = X_test.reshape(X_test.shape[0], 1, X_shape)    # (samples, time steps, features)\n",
    "\n",
    "model = tf.keras.models.Sequential([\n",
    "    LSTM(80, activation=tf.nn.tanh, return_sequences=True, input_shape=(1, X_shape)), # Correct input shape\n",
    "    Dropout(dropout_rate),\n",
    "    LSTM(60, activation=tf.nn.tanh, return_sequences=True),\n",
    "    Dropout(dropout_rate),\n",
    "    GRU(units=60, return_sequences=True),\n",
    "    Dropout(dropout_rate),\n",
    "    LSTM(40, activation=tf.nn.tanh),\n",
    "    Dropout(dropout_rate),\n",
    "    Dense(20, activation=tf.nn.sigmoid),\n",
    "    Dropout(dropout_rate),\n",
    "    Dense(2, activation=tf.nn.softmax)\n",
    "])\n",
    "\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# 训练模型\n",
    "model.fit(X_train, y_train, epochs=30, batch_size=32)\n",
    "\n",
    "# 评估模型\n",
    "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
    "\n",
    "print(f\"模型准确性: {accuracy:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "ModelSave = \"modelGUR_avg_2\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "spsdvH-F2T-f",
    "outputId": "f165b970-6915-4fa7-802c-b4a1b70743e1"
   },
   "outputs": [],
   "source": [
    "# 保存模型到指定的文件路徑\n",
    "model.save(ModelSave + '.h5')\n",
    "\n",
    "# 保存模型架構到 JSON 格式\n",
    "model_json = model.to_json()\n",
    "with open(ModelSave + '.h5''.json', 'w') as json_file:\n",
    "    json_file.write(model_json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "id": "IuUDoDULL0RV"
   },
   "outputs": [],
   "source": [
    "model.save(ModelSave + '.keras')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 581
    },
    "id": "2XVzUeWMef-L",
    "outputId": "b7b72d19-9f57-4a2f-dfe8-59751c665b5c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12/12 [==============================] - 3s 21ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "# 1. 使用模型進行預測\n",
    "y_pred_probs = model.predict(X_test)  # 預測的機率\n",
    "y_pred = np.argmax(y_pred_probs, axis=1)  # 將預測的機率轉換為類別\n",
    "\n",
    "# 2. 確保 y_test 是標籤（如果它是 one-hot 編碼的，需要轉換）\n",
    "if y_test.shape[1] > 0:  # 如果 y_test 是 one-hot 編碼\n",
    "    y_test_labels = np.argmax(y_test, axis=1)\n",
    "else:\n",
    "    y_test_labels = y_test\n",
    "\n",
    "# 3. 計算混淆矩陣\n",
    "cm = confusion_matrix(y_test_labels, y_pred)\n",
    "\n",
    "# 4. 繪製混淆矩陣\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"lose\", \"win\"], yticklabels=[\"lose\", \"win\"])\n",
    "plt.xlabel(\"Predicted label\")\n",
    "plt.ylabel(\"True label\")\n",
    "plt.title(\"Confusion matrix after calibration\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 222
    },
    "id": "hQU4g-xkekda",
    "outputId": "cda32b06-8124-4276-e867-b05cf38c9b94"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 15ms/step\n",
      "6/6 [==============================] - 0s 27ms/step\n",
      "6/6 [==============================] - 0s 64ms/step\n",
      "6/6 [==============================] - 0s 34ms/step\n",
      "6/6 [==============================] - 0s 33ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>CalibratedClassifierCV(cv=5, estimator=KerasClassifier())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;CalibratedClassifierCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.calibration.CalibratedClassifierCV.html\">?<span>Documentation for CalibratedClassifierCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>CalibratedClassifierCV(cv=5, estimator=KerasClassifier())</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: KerasClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>KerasClassifier()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">KerasClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>KerasClassifier()</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "CalibratedClassifierCV(cv=5, estimator=KerasClassifier())"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "from sklearn.calibration import CalibratedClassifierCV\n",
    "from sklearn.metrics import brier_score_loss, accuracy_score, confusion_matrix\n",
    "from sklearn.base import clone, BaseEstimator, ClassifierMixin # Import BaseEstimator and ClassifierMixin\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# ... (Your existing code for model creation and training) ...\n",
    "\n",
    "# Update KerasClassifier to inherit from BaseEstimator and ClassifierMixin and implement clone method\n",
    "class KerasClassifier(BaseEstimator, ClassifierMixin):\n",
    "    def __init__(self, model):\n",
    "        self.model = model\n",
    "        self.classes_ = [0, 1]  # Add this line to define classes_\n",
    "\n",
    "    def predict_proba(self, X):\n",
    "        # Ensure X has the correct shape for the LSTM model\n",
    "        X = X.reshape(X.shape[0], 1, X_shape)\n",
    "\n",
    "        # Get raw predictions\n",
    "        y_pred = self.model.predict(X)\n",
    "\n",
    "        # Assuming binary classification, return probabilities\n",
    "        return y_pred\n",
    "\n",
    "    def predict(self, X):\n",
    "        # Get probabilities\n",
    "        probs = self.predict_proba(X)\n",
    "\n",
    "        # Return the class with the highest probability\n",
    "        return np.argmax(probs, axis=1)\n",
    "\n",
    "    def fit(self, X, y):\n",
    "        # This is a dummy fit method. The model is assumed to be already trained.\n",
    "        # If you need to re-train, implement the logic here.\n",
    "        # Manually set classes_ during fit\n",
    "        self.classes_ = np.unique(y)  # Add this line\n",
    "        pass\n",
    "\n",
    "    def get_params(self, deep=True):\n",
    "        # Return a dictionary of the model's parameters\n",
    "        # (This may need to be adjusted depending on your specific TensorFlow model)\n",
    "        return {}\n",
    "\n",
    "    def set_params(self, **parameters):\n",
    "        # Update the model's parameters\n",
    "        # (This may need to be adjusted depending on your specific TensorFlow model)\n",
    "        for parameter, value in parameters.items():\n",
    "            setattr(self, parameter, value)\n",
    "        return self\n",
    "\n",
    "    # Implement the clone method for KerasClassifier\n",
    "    def __sklearn_clone__(self, make_deep=False):\n",
    "        \"\"\"\n",
    "        Since `clone` doesn't know how to handle custom classes like `KerasClassifier`,\n",
    "        we implement a custom `__sklearn_clone__` method to handle the cloning process.\n",
    "\n",
    "        This method creates a new instance of `KerasClassifier` with the same model.\n",
    "        \"\"\"\n",
    "        new_classifier = type(self)(self.model) # Pass the model during instantiation\n",
    "        return new_classifier\n",
    "\n",
    "# ... (Your existing code for model creation and training) ...\n",
    "\n",
    "# Now you can use the wrapper in CalibratedClassifierCV\n",
    "keras_clf = KerasClassifier(model)\n",
    "\n",
    "# Convert y_train to 1D for CalibratedClassifierCV\n",
    "y_train_1d = np.argmax(y_train.values, axis=1)  # Assuming y_train is a DataFrame\n",
    "\n",
    "calibrated_model = CalibratedClassifierCV(keras_clf, method='sigmoid', cv=5)\n",
    "calibrated_model.fit(X_train, y_train_1d)  # Use the 1D target array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "lDU0n6GOeoAK",
    "outputId": "d71e41bf-73a1-4638-f640-6cb255caad72"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 8ms/step\n",
      "6/6 [==============================] - 0s 39ms/step\n",
      "6/6 [==============================] - 0s 12ms/step\n",
      "6/6 [==============================] - 0s 9ms/step\n",
      "6/6 [==============================] - 0s 9ms/step\n",
      "12/12 [==============================] - 0s 14ms/step\n",
      "12/12 [==============================] - 0s 7ms/step\n",
      "12/12 [==============================] - 0s 20ms/step\n",
      "12/12 [==============================] - 0s 11ms/step\n",
      "12/12 [==============================] - 0s 8ms/step\n",
      "12/12 [==============================] - 0s 18ms/step\n",
      "12/12 [==============================] - 0s 14ms/step\n",
      "12/12 [==============================] - 0s 11ms/step\n",
      "12/12 [==============================] - 0s 6ms/step\n",
      "12/12 [==============================] - 0s 3ms/step\n",
      "校準後的準確率: 0.5349462365591398\n",
      "Brier 損失分數: 0.3253910186951863\n"
     ]
    }
   ],
   "source": [
    "# Now you can use the wrapper in CalibratedClassifierCV\n",
    "keras_clf = KerasClassifier(model)\n",
    "\n",
    "# Convert y_train to 1D for CalibratedClassifierCV\n",
    "y_train_1d = np.argmax(y_train.values, axis=1)  # Assuming y_train is a DataFrame\n",
    "\n",
    "calibrated_model = CalibratedClassifierCV(keras_clf, method='sigmoid', cv=5)\n",
    "calibrated_model.fit(X_train, y_train_1d)  # Use the 1D target array\n",
    "\n",
    "\n",
    "\n",
    "# ... (Rest of your code) ...\n",
    "\n",
    "# 獲取校準後的預測概率\n",
    "y_prob_calibrated = calibrated_model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# 進行預測並評估模型\n",
    "y_pred_calibrated = calibrated_model.predict(X_test)\n",
    "\n",
    "# Convert y_test to binary format if it's in multilabel-indicator format\n",
    "# Assuming y_test is a DataFrame or a 2D NumPy array\n",
    "y_test_binary = np.argmax(y_test.values, axis=1)\n",
    "cm = confusion_matrix(y_test_binary, y_pred_calibrated)\n",
    "# Now calculate accuracy with consistent formats\n",
    "accuracy = accuracy_score(y_test_binary, y_pred_calibrated)\n",
    "brier_score = brier_score_loss(y_test_binary, y_prob_calibrated) # y_prob_calibrated is expected to be for the positive class\n",
    "\n",
    "\n",
    "print(f\"校準後的準確率: {accuracy}\")\n",
    "print(f\"Brier 損失分數: {brier_score}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 718
    },
    "id": "m2iZGG9JepjO",
    "outputId": "4a83cc91-49b6-4e9e-ab4d-0c3fb9c32bf5"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 畫出校準曲線\n",
    "from sklearn.calibration import calibration_curve\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "# ... (Rest of your code) ...\n",
    "\n",
    "# Convert y_test to 1D for calibration_curve using argmax\n",
    "y_test_1d = np.argmax(y_test.values, axis=1)  # Assuming y_test is a DataFrame or a 2D NumPy array\n",
    "\n",
    "# Calculate calibration curve using the 1D version of y_test\n",
    "fraction_of_positives, mean_predicted_value = calibration_curve(y_test_1d, y_prob_calibrated, n_bins=10)\n",
    "\n",
    "# ... (Rest of your code) ...\n",
    "\n",
    "plt.plot(mean_predicted_value, fraction_of_positives, \"s-\", label=\"Calibrated Model\")\n",
    "plt.plot([0, 1], [0, 1], \"k--\", label=\"Perfectly calibrated\")\n",
    "plt.xlabel(\"Mean predicted probability\")\n",
    "plt.ylabel(\"Fraction of positives\")\n",
    "plt.legend()\n",
    "plt.title(\"Calibration plot\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "id": "2L1pKwMjerEo",
    "outputId": "2a40c48b-494b-44ba-aec6-87b9f41c12d2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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/bUGDx6szMxMzZkzxzQ2JyfH9v3YtyooKKhYjgMAKFkkiYCbsFqtCg8PV8WKFdWvXz89+OCDtinPa1PEb731lqpUqSKr1SrDMHT+/Hk9+uijCg0NVenSpdWmTRvt2LHD7rgvvviiwsLCFBgYqEGDBunq1at2z18/3Zyfn68pU6aoWrVqslqtqlSpkiZNmiRJqly5siSpYcOGslgsiouLs71u/vz5qlWrlnx9fVWzZk29+uqrdu+zZcsWNWzYUL6+vmrSpIm2bdtW5M9o+vTpqlevngICAlSxYkUNGzZMly5dMo1bsWKFatSoIV9fX7Vv317Hjx+3e/7jjz9W48aN5evrqypVquj5559Xbm5ukesBAGeiSQTclJ+fn3JycmyPDxw4oHfffVfLly+3Tfd27txZGRkZ+uyzz/Tdd9+pUaNGatu2rc6ePStJevfdd5WYmKhJkyYpLS1NERERpubtemPHjtWUKVM0fvx47dmzR0uXLlVYWJikXxs9Sfryyy918uRJvf/++5KkefPmady4cZo0aZLS09M1efJkjR8/XgsXLpQkZWZmqkuXLoqJidF3332npKQkjRo1qsifiYeHh2bOnKldu3Zp4cKFWrt2rcaMGWM35vLly5o0aZIWLlyob775RhcuXFCfPn1sz69atUp/+9vfNHz4cO3Zs0evvfaaFixYYGuEAeC2YQD40+vfv78RHx9ve7x582ajXLlyRq9evQzDMIzExETD29vbOHXqlG3MmjVrjNKlSxtXr161O1bVqlWN1157zTAMw2jevLnx2GOP2T3ftGlTo379+gW+94ULFwyr1WrMmzevwDoPHz5sSDK2bdtmt79ixYrG0qVL7fZNnDjRaN68uWEYhvHaa68ZwcHBRmZmpu35OXPmFHis34qKijJefvnlGz7/7rvvGuXKlbM9nj9/viHJ2LRpk21fenq6IcnYvHmzYRiGce+99xqTJ0+2O86iRYuMiIgI22NJxgcffHDD9wUAV8CaRMBNfPLJJypVqpRyc3OVk5Oj+Ph4zZo1y/Z8VFSUypcvb3v83Xff6dKlSypXrpzdca5cuaKDBw9KktLT0/XYY4/ZPd+8eXOtW7euwBrS09OVlZWltm3bFrru06dP6/jx4xo0aJCGDBli25+bm2tb75ienq769evL39/fro6iWrdunSZPnqw9e/bowoULys3N1dWrV5WZmamAgABJkpeXl5o0aWJ7Tc2aNVWmTBmlp6fr7rvv1nfffafU1FS75DAvL09Xr17V5cuX7WoEAFdGkwi4idatW2vOnDny9vZWZGSk6cKUa03QNfn5+YqIiFBKSorpWDd7Gxg/P78ivyY/P1/Sr1POTZs2tXvO09NTkmQYxk3V81tHjx5Vp06d9Nhjj2nixIkKDg7Whg0bNGjQILtpeenXW9hc79q+/Px8Pf/88+rRo4dpjK+v7y3XCQAlhSYRcBMBAQGqVq1aocc3atRIGRkZ8vLyUnR0dIFjatWqpU2bNunhhx+27du0adMNj1m9enX5+flpzZo1Gjx4sOl5Hx8fSb8mb9eEhYWpQoUKOnTokB588MECj1u7dm0tWrRIV65csTWiv1dHQdLS0pSbm6tp06bJw+PX5drvvvuuaVxubq7S0tJ09913S5L27t2rX375RTVr1pT06+e2d+/eIn3WAOCKaBIBFKhdu3Zq3ry5unXrpilTpigmJkY//vijPvvsM3Xr1k1NmjTRk08+qf79+6tJkya65557tGTJEu3evVtVqlQp8Ji+vr56+umnNWbMGPn4+Khly5Y6ffq0du/erUGDBik0NFR+fn5auXKl7rjjDvn6+iooKEhJSUkaPny4SpcurY4dOyorK0tpaWk6d+6cRowYoX79+mncuHEaNGiQnnvuOR05ckT/+te/inS+VatWVW5urmbNmqWuXbvqm2++0dy5c03jvL299Y9//EMzZ86Ut7e3/v73v6tZs2a2pnHChAnq0qWLKlasqL/+9a/y8PDQ999/r507d+qf//xn0f8iAMBJuLoZQIEsFos+++wztWrVSgMHDlSNGjXUp08fHTlyxHY1cu/evTVhwgQ9/fTTaty4sY4eParHH3/8d487fvx4jRw5UhMmTFCtWrXUu3dvnTp1StKv6/1mzpyp1157TZGRkYqPj5ckDR48WG+88YYWLFigevXqKTY2VgsWLLDdMqdUqVL6+OOPtWfPHjVs2FDjxo3TlClTinS+DRo00PTp0zVlyhTVrVtXS5YsUXJysmmcv7+/nn76afXr10/NmzeXn5+f3nnnHdvz999/vz755BN98cUXuuuuu9SsWTNNnz5dUVFRRaoHAJzNYhTHYh4AAAD8qZAkAgAAwIQmEQAAACY0iQAAADChSQQAAIAJTSIAAABMaBIBAABgQpMIAAAAE5pEAAAAmNAkAgAAwIQmEQAAACY0iQAAADD5f7YzlSOuJ6fCAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 生成混淆矩陣\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"lose\",\"win\"], yticklabels=[\"lose\",\"win\"])\n",
    "plt.xlabel(\"Predicted label\")\n",
    "plt.ylabel(\"True label\")\n",
    "plt.title(\"Confusion matrix after calibration\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 715
    },
    "id": "ugPsj8M8esu7",
    "outputId": "5da8a721-ef55-4af1-b03b-b63d4cb9712e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12/12 [==============================] - 0s 14ms/step\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.48      0.50      0.49       168\n",
      "           1       0.57      0.55      0.56       204\n",
      "\n",
      "    accuracy                           0.53       372\n",
      "   macro avg       0.52      0.52      0.52       372\n",
      "weighted avg       0.53      0.53      0.53       372\n",
      "\n",
      "Confusion Matrix:\n",
      "[[ 84  84]\n",
      " [ 92 112]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 取得模型預測的概率分數\n",
    "y_pred_prob = model.predict(X_test)\n",
    "\n",
    "# 將概率轉換為類別\n",
    "y_pred = np.argmax(y_pred_prob, axis=1)\n",
    "y_test_classes = np.argmax(y_test, axis=1)  # 將 one-hot 編碼轉回類別\n",
    "\n",
    "# 1. 計算分類報告\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test_classes, y_pred))\n",
    "\n",
    "# 2. 混淆矩陣\n",
    "conf_matrix = confusion_matrix(y_test_classes, y_pred)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n",
    "\n",
    "# 3. 計算ROC和AUC\n",
    "fpr, tpr, _ = roc_curve(y_test_classes, y_pred_prob[:, 1])  # 假設類別1為正類\n",
    "roc_auc = roc_auc_score(y_test_classes, y_pred_prob[:, 1])\n",
    "\n",
    "# 繪製ROC曲線\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='blue', label=f'ROC curve (AUC = {roc_auc:.2f})')\n",
    "plt.plot([0, 1], [0, 1], color='grey', linestyle='--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2yPn34aMeyBi",
    "outputId": "2e5d23ec-3ef6-4c71-ed2f-e72ec0e5fa58"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_train shape: (868, 2)\n",
      "y_test shape: (372, 2)\n"
     ]
    }
   ],
   "source": [
    "# 檢查 y_train 和 y_test 的形狀\n",
    "print(\"y_train shape:\", y_train.shape)\n",
    "print(\"y_test shape:\", y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "92c0Bb_sezWu",
    "outputId": "18549a4a-eef4-4b7d-bf2a-7a062c3a0358"
   },
   "outputs": [],
   "source": [
    "model.save(ModelSave + '.keras')\n",
    "model.save(ModelSave + '.h5')"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "tsfm_conda_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
